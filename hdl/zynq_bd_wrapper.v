//Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//--------------------------------------------------------------------------------
//Tool Version: Vivado v.2022.2 (win64) Build 3671981 Fri Oct 14 05:00:03 MDT 2022
//Date        : Thu Mar 28 12:31:40 2024
//Host        : ASCPHY-NC196428 running 64-bit major release  (build 9200)
//Command     : generate_target zynq_bd_wrapper.bd
//Design      : zynq_bd_wrapper
//Purpose     : IP block netlist
//--------------------------------------------------------------------------------
// OSU PSA: THIS IS NOT AUTOGENERATED ANYMORE
// - TO MAKE CHANGES, SELECT THE BLOCK DIAGRAM AND DO "VIEW INSTANTIATION TEMPLATE"
//   THEN COPY THOSE CHANGES INTO HERE.
`timescale 1 ps / 1 ps

module zynq_bd_wrapper
   (UART_1_0_rxd,
    UART_1_0_txd,    
    GPIO_0_0_tri_i,
    GPIO_0_0_tri_o,
    GPIO_0_0_tri_t,
    // SPI INTERFACE - PL IS PURE SLAVE SO DEFINE THAT WAY
    spi_sclk,
    spi_mosi,
    spi_miso,
    spi_cs_b,
    pl_clk0_0    
    );
    
  parameter REVISION = "A";    
  input UART_1_0_rxd;
  output UART_1_0_txd;
  input [15:0] GPIO_0_0_tri_i;
  output [15:0] GPIO_0_0_tri_o;
  output [15:0] GPIO_0_0_tri_t;
  output spi_sclk;
  output spi_mosi;
  input spi_miso;
  output spi_cs_b;
  // dumbass EMIO SPI crap
  // we trimmed out some of the stuff that doesn't matter, so recombine that here
  wire spi_mosi_o;
  wire spi_mosi_t;
  assign spi_mosi = (spi_mosi_t) ? 1'b0 : spi_mosi_o;
  wire spi_sclk_o;
  wire spi_sclk_t;
  assign spi_sclk = (spi_sclk_t) ? 1'b0 : spi_sclk_o;
  wire spi_ss_n_o;
  wire spi_ss_n_t;
  assign spi_cs_b = (spi_ss_n_t) ? 1'b1 : spi_ss_n_o;
  // the instantiation template is
//        .emio_spi1_m_o_0(emio_spi1_m_o_0),
//        .emio_spi1_mo_t_0(emio_spi1_mo_t_0),
//        .emio_spi1_m_i_0(emio_spi1_m_i_0),
//        .emio_spi1_sclk_o_0(emio_spi1_sclk_o_0),
//        .emio_spi1_sclk_t_0(emio_spi1_sclk_t_0),
//        .emio_spi1_ss_n_t_0(emio_spi1_ss_n_t_0),
//        .emio_spi1_ss_o_n_0(emio_spi1_ss_o_n_0),
    
  
  output pl_clk0_0;
  generate
    if (REVISION == "B") begin : REVB
      zynq_bd_revB zynq_bd_i
           (.UART_1_0_rxd(UART_1_0_rxd),
            .UART_1_0_txd(UART_1_0_txd),
            .emio_spi1_m_o_0(spi_mosi_o),
            .emio_spi1_mo_t_0(spi_mosi_t),
            // NOTE NOTE NOTE NOTE NOTE:
            // XILINX IS PSYCHOTIC - THE NAMING HERE IS CORRECT
            // MOSI IS (s_i/m_o/mo_t) in/out/tri
            // MISO IS (m_i/s_o/so_t) in/out/tri
            // BECAUSE THEY HAVE LOST THEIR GODDAMN MINDS
            // JUST THINK OF IT LIKE THIS: IF YOU ARE THE MASTER,
            // YOU USE ONLY THE M PINS (m_i/m_o/mo_t)
            // IF YOU ARE THE SLAVE,
            // YOU USE ONLY THE S PINS (s_i/s_o/so_t)
            // BUT NO ONE IN THEIR RIGHT MIND WOULD THINK LIKE THIS!!
            .emio_spi1_m_i_0(spi_miso),
            .emio_spi1_sclk_o_0(spi_sclk_o),
            .emio_spi1_sclk_t_0(spi_sclk_t),
            .emio_spi1_ss_n_t_0(spi_ss_n_t),
            .emio_spi1_ss_o_n_0(spi_ss_n_o),
            .GPIO_0_0_tri_i(GPIO_0_0_tri_i),
            .GPIO_0_0_tri_o(GPIO_0_0_tri_o),
            .GPIO_0_0_tri_t(GPIO_0_0_tri_t),
            .pl_clk0_0(pl_clk0_0));
    end else begin : REVA
      zynq_bd zynq_bd_i
           (.UART_1_0_rxd(UART_1_0_rxd),
            .UART_1_0_txd(UART_1_0_txd),
            .GPIO_0_0_tri_i(GPIO_0_0_tri_i),
            .GPIO_0_0_tri_o(GPIO_0_0_tri_o),
            .GPIO_0_0_tri_t(GPIO_0_0_tri_t),
            .pl_clk0_0(pl_clk0_0));
     end  
  endgenerate
endmodule
